name: 🔍 CI - Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks weekly
    - cron: '0 0 * * 0'

jobs:
  quality-check:
    name: 🧪 Quality Check (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        fail-fast: false
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔍 Run linting
        run: npm run lint
        
      - name: 🏗️ Type check and build
        run: npm run build
        
      - name: 🧪 Run tests
        run: npm test --if-present
        
      - name: ✅ Verify build output
        run: |
          echo "🔍 Checking build output..."
          
          # Check if dist directory exists
          if [ ! -d "dist" ]; then
            echo "❌ dist/ directory not found!"
            exit 1
          fi
          
          # Count files
          FILE_COUNT=$(find dist/ -type f | wc -l)
          echo "📊 Total build files: $FILE_COUNT"
          
          # List all files
          echo "📁 Build directory contents:"
          ls -la dist/
          
          # Check specific file types
          JS_FILES=$(find dist/ -name "*.js" | wc -l)
          TS_FILES=$(find dist/ -name "*.d.ts" | wc -l)
          MAP_FILES=$(find dist/ -name "*.js.map" | wc -l)
          
          echo "📋 File breakdown:"
          echo "  - JavaScript files: $JS_FILES"
          echo "  - TypeScript declarations: $TS_FILES"
          echo "  - Source maps: $MAP_FILES"
          
          # Verify essential files exist
          ESSENTIAL_FILES=("dist/index.js" "dist/index.d.ts")
          for file in "${ESSENTIAL_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing essential file: $file"
              exit 1
            fi
          done
          
          echo "✅ Build verification passed!"
          
      - name: 📏 Check bundle size
        run: |
          echo "📦 Checking bundle sizes..."
          for file in dist/*.js; do
            if [ -f "$file" ]; then
              SIZE=$(wc -c < "$file")
              SIZE_KB=$((SIZE / 1024))
              echo "📁 $file: ${SIZE_KB}KB"
            fi
          done
          
  security-check:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔒 Run security audit
        run: npm audit --audit-level moderate
        
      - name: 🔍 Check for outdated packages
        run: npm outdated || true
        
  dependency-check:
    name: 📋 Dependency Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 📊 Check dependency licenses
        run: |
          echo "📋 Checking package licenses..."
          npm ls --depth=0
          
      - name: 🔍 Analyze dependencies
        run: |
          echo "📊 Dependency analysis:"
          echo "Total dependencies: $(npm list --depth=0 | grep -c '├──\|└──')"
          echo "Dev dependencies: $(npm list --depth=0 --dev | grep -c '├──\|└──')"
          
  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🧹 Clean previous builds
        run: |
          rm -rf dist/
          rm -rf node_modules/
          
      - name: 📦 Fresh install
        run: npm ci
        
      - name: 🏗️ Build package
        run: npm run build
        
      - name: ✅ Verify clean build
        run: |
          echo "🔍 Verifying clean build..."
          
          # Check build output
          if [ ! -d "dist" ]; then
            echo "❌ Build failed - no dist directory"
            exit 1
          fi
          
          # Check file integrity
          for file in dist/*.js; do
            if [ -f "$file" ]; then
              echo "✅ $file built successfully"
            fi
          done
          
          echo "🎉 Clean build completed successfully!"
